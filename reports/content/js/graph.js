/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 222.0, "minX": 0.0, "maxY": 36146.0, "series": [{"data": [[0.0, 222.0], [0.1, 223.0], [0.2, 224.0], [0.3, 224.0], [0.4, 225.0], [0.5, 226.0], [0.6, 227.0], [0.7, 227.0], [0.8, 228.0], [0.9, 228.0], [1.0, 228.0], [1.1, 229.0], [1.2, 229.0], [1.3, 229.0], [1.4, 229.0], [1.5, 229.0], [1.6, 230.0], [1.7, 230.0], [1.8, 230.0], [1.9, 230.0], [2.0, 230.0], [2.1, 231.0], [2.2, 231.0], [2.3, 231.0], [2.4, 231.0], [2.5, 232.0], [2.6, 232.0], [2.7, 232.0], [2.8, 232.0], [2.9, 232.0], [3.0, 233.0], [3.1, 233.0], [3.2, 233.0], [3.3, 233.0], [3.4, 233.0], [3.5, 233.0], [3.6, 234.0], [3.7, 234.0], [3.8, 234.0], [3.9, 234.0], [4.0, 234.0], [4.1, 234.0], [4.2, 234.0], [4.3, 234.0], [4.4, 235.0], [4.5, 235.0], [4.6, 235.0], [4.7, 235.0], [4.8, 235.0], [4.9, 235.0], [5.0, 235.0], [5.1, 235.0], [5.2, 235.0], [5.3, 235.0], [5.4, 236.0], [5.5, 236.0], [5.6, 236.0], [5.7, 236.0], [5.8, 236.0], [5.9, 236.0], [6.0, 236.0], [6.1, 236.0], [6.2, 236.0], [6.3, 236.0], [6.4, 236.0], [6.5, 236.0], [6.6, 237.0], [6.7, 237.0], [6.8, 237.0], [6.9, 237.0], [7.0, 237.0], [7.1, 237.0], [7.2, 237.0], [7.3, 237.0], [7.4, 238.0], [7.5, 238.0], [7.6, 238.0], [7.7, 238.0], [7.8, 238.0], [7.9, 238.0], [8.0, 238.0], [8.1, 238.0], [8.2, 238.0], [8.3, 238.0], [8.4, 238.0], [8.5, 238.0], [8.6, 239.0], [8.7, 239.0], [8.8, 239.0], [8.9, 239.0], [9.0, 239.0], [9.1, 239.0], [9.2, 239.0], [9.3, 239.0], [9.4, 239.0], [9.5, 239.0], [9.6, 239.0], [9.7, 239.0], [9.8, 239.0], [9.9, 239.0], [10.0, 240.0], [10.1, 240.0], [10.2, 240.0], [10.3, 240.0], [10.4, 240.0], [10.5, 240.0], [10.6, 240.0], [10.7, 240.0], [10.8, 240.0], [10.9, 240.0], [11.0, 240.0], [11.1, 240.0], [11.2, 240.0], [11.3, 241.0], [11.4, 241.0], [11.5, 241.0], [11.6, 241.0], [11.7, 241.0], [11.8, 241.0], [11.9, 241.0], [12.0, 241.0], [12.1, 241.0], [12.2, 241.0], [12.3, 241.0], [12.4, 241.0], [12.5, 241.0], [12.6, 241.0], [12.7, 241.0], [12.8, 242.0], [12.9, 242.0], [13.0, 242.0], [13.1, 242.0], [13.2, 242.0], [13.3, 242.0], [13.4, 242.0], [13.5, 242.0], [13.6, 242.0], [13.7, 242.0], [13.8, 242.0], [13.9, 242.0], [14.0, 242.0], [14.1, 242.0], [14.2, 242.0], [14.3, 243.0], [14.4, 243.0], [14.5, 243.0], [14.6, 243.0], [14.7, 243.0], [14.8, 243.0], [14.9, 243.0], [15.0, 243.0], [15.1, 243.0], [15.2, 243.0], [15.3, 243.0], [15.4, 243.0], [15.5, 243.0], [15.6, 243.0], [15.7, 244.0], [15.8, 244.0], [15.9, 244.0], [16.0, 244.0], [16.1, 244.0], [16.2, 244.0], [16.3, 244.0], [16.4, 244.0], [16.5, 244.0], [16.6, 244.0], [16.7, 244.0], [16.8, 245.0], [16.9, 245.0], [17.0, 245.0], [17.1, 245.0], [17.2, 245.0], [17.3, 245.0], [17.4, 245.0], [17.5, 245.0], [17.6, 245.0], [17.7, 245.0], [17.8, 245.0], [17.9, 245.0], [18.0, 245.0], [18.1, 246.0], [18.2, 246.0], [18.3, 246.0], [18.4, 246.0], [18.5, 246.0], [18.6, 246.0], [18.7, 246.0], [18.8, 246.0], [18.9, 246.0], [19.0, 246.0], [19.1, 247.0], [19.2, 247.0], [19.3, 247.0], [19.4, 247.0], [19.5, 247.0], [19.6, 247.0], [19.7, 247.0], [19.8, 247.0], [19.9, 247.0], [20.0, 247.0], [20.1, 247.0], [20.2, 247.0], [20.3, 248.0], [20.4, 248.0], [20.5, 248.0], [20.6, 248.0], [20.7, 248.0], [20.8, 248.0], [20.9, 248.0], [21.0, 248.0], [21.1, 248.0], [21.2, 248.0], [21.3, 248.0], [21.4, 249.0], [21.5, 249.0], [21.6, 249.0], [21.7, 249.0], [21.8, 249.0], [21.9, 249.0], [22.0, 249.0], [22.1, 249.0], [22.2, 249.0], [22.3, 249.0], [22.4, 249.0], [22.5, 250.0], [22.6, 250.0], [22.7, 250.0], [22.8, 250.0], [22.9, 250.0], [23.0, 250.0], [23.1, 250.0], [23.2, 250.0], [23.3, 250.0], [23.4, 250.0], [23.5, 251.0], [23.6, 251.0], [23.7, 251.0], [23.8, 251.0], [23.9, 251.0], [24.0, 251.0], [24.1, 251.0], [24.2, 251.0], [24.3, 251.0], [24.4, 251.0], [24.5, 251.0], [24.6, 252.0], [24.7, 252.0], [24.8, 252.0], [24.9, 252.0], [25.0, 252.0], [25.1, 252.0], [25.2, 252.0], [25.3, 252.0], [25.4, 252.0], [25.5, 252.0], [25.6, 252.0], [25.7, 252.0], [25.8, 252.0], [25.9, 252.0], [26.0, 253.0], [26.1, 253.0], [26.2, 253.0], [26.3, 253.0], [26.4, 253.0], [26.5, 253.0], [26.6, 253.0], [26.7, 253.0], [26.8, 253.0], [26.9, 254.0], [27.0, 254.0], [27.1, 254.0], [27.2, 254.0], [27.3, 254.0], [27.4, 254.0], [27.5, 254.0], [27.6, 255.0], [27.7, 255.0], [27.8, 255.0], [27.9, 255.0], [28.0, 255.0], [28.1, 255.0], [28.2, 255.0], [28.3, 255.0], [28.4, 256.0], [28.5, 256.0], [28.6, 256.0], [28.7, 256.0], [28.8, 256.0], [28.9, 256.0], [29.0, 256.0], [29.1, 256.0], [29.2, 256.0], [29.3, 256.0], [29.4, 256.0], [29.5, 257.0], [29.6, 257.0], [29.7, 257.0], [29.8, 257.0], [29.9, 257.0], [30.0, 257.0], [30.1, 257.0], [30.2, 257.0], [30.3, 257.0], [30.4, 257.0], [30.5, 258.0], [30.6, 258.0], [30.7, 258.0], [30.8, 258.0], [30.9, 258.0], [31.0, 258.0], [31.1, 258.0], [31.2, 258.0], [31.3, 258.0], [31.4, 259.0], [31.5, 259.0], [31.6, 259.0], [31.7, 259.0], [31.8, 259.0], [31.9, 259.0], [32.0, 259.0], [32.1, 259.0], [32.2, 259.0], [32.3, 259.0], [32.4, 260.0], [32.5, 260.0], [32.6, 260.0], [32.7, 260.0], [32.8, 260.0], [32.9, 260.0], [33.0, 260.0], [33.1, 260.0], [33.2, 260.0], [33.3, 261.0], [33.4, 261.0], [33.5, 261.0], [33.6, 261.0], [33.7, 261.0], [33.8, 261.0], [33.9, 261.0], [34.0, 261.0], [34.1, 262.0], [34.2, 262.0], [34.3, 262.0], [34.4, 262.0], [34.5, 262.0], [34.6, 262.0], [34.7, 262.0], [34.8, 262.0], [34.9, 262.0], [35.0, 263.0], [35.1, 263.0], [35.2, 263.0], [35.3, 263.0], [35.4, 263.0], [35.5, 263.0], [35.6, 263.0], [35.7, 263.0], [35.8, 264.0], [35.9, 264.0], [36.0, 264.0], [36.1, 264.0], [36.2, 264.0], [36.3, 264.0], [36.4, 264.0], [36.5, 264.0], [36.6, 264.0], [36.7, 265.0], [36.8, 265.0], [36.9, 265.0], [37.0, 265.0], [37.1, 265.0], [37.2, 265.0], [37.3, 265.0], [37.4, 265.0], [37.5, 266.0], [37.6, 266.0], [37.7, 266.0], [37.8, 266.0], [37.9, 266.0], [38.0, 266.0], [38.1, 266.0], [38.2, 267.0], [38.3, 267.0], [38.4, 267.0], [38.5, 267.0], [38.6, 267.0], [38.7, 267.0], [38.8, 267.0], [38.9, 268.0], [39.0, 268.0], [39.1, 268.0], [39.2, 268.0], [39.3, 268.0], [39.4, 269.0], [39.5, 269.0], [39.6, 269.0], [39.7, 269.0], [39.8, 269.0], [39.9, 269.0], [40.0, 270.0], [40.1, 270.0], [40.2, 270.0], [40.3, 270.0], [40.4, 271.0], [40.5, 271.0], [40.6, 271.0], [40.7, 271.0], [40.8, 271.0], [40.9, 271.0], [41.0, 271.0], [41.1, 272.0], [41.2, 272.0], [41.3, 272.0], [41.4, 272.0], [41.5, 273.0], [41.6, 273.0], [41.7, 273.0], [41.8, 273.0], [41.9, 274.0], [42.0, 274.0], [42.1, 275.0], [42.2, 275.0], [42.3, 275.0], [42.4, 276.0], [42.5, 276.0], [42.6, 276.0], [42.7, 276.0], [42.8, 277.0], [42.9, 277.0], [43.0, 277.0], [43.1, 278.0], [43.2, 278.0], [43.3, 278.0], [43.4, 279.0], [43.5, 279.0], [43.6, 279.0], [43.7, 280.0], [43.8, 280.0], [43.9, 280.0], [44.0, 281.0], [44.1, 281.0], [44.2, 281.0], [44.3, 282.0], [44.4, 282.0], [44.5, 282.0], [44.6, 283.0], [44.7, 283.0], [44.8, 284.0], [44.9, 284.0], [45.0, 284.0], [45.1, 285.0], [45.2, 285.0], [45.3, 286.0], [45.4, 286.0], [45.5, 286.0], [45.6, 287.0], [45.7, 287.0], [45.8, 288.0], [45.9, 288.0], [46.0, 289.0], [46.1, 289.0], [46.2, 290.0], [46.3, 290.0], [46.4, 291.0], [46.5, 291.0], [46.6, 291.0], [46.7, 292.0], [46.8, 293.0], [46.9, 293.0], [47.0, 293.0], [47.1, 294.0], [47.2, 294.0], [47.3, 295.0], [47.4, 295.0], [47.5, 296.0], [47.6, 297.0], [47.7, 297.0], [47.8, 298.0], [47.9, 298.0], [48.0, 299.0], [48.1, 299.0], [48.2, 300.0], [48.3, 300.0], [48.4, 300.0], [48.5, 302.0], [48.6, 303.0], [48.7, 303.0], [48.8, 304.0], [48.9, 304.0], [49.0, 305.0], [49.1, 305.0], [49.2, 306.0], [49.3, 306.0], [49.4, 307.0], [49.5, 307.0], [49.6, 308.0], [49.7, 309.0], [49.8, 310.0], [49.9, 311.0], [50.0, 311.0], [50.1, 312.0], [50.2, 313.0], [50.3, 313.0], [50.4, 314.0], [50.5, 314.0], [50.6, 314.0], [50.7, 316.0], [50.8, 316.0], [50.9, 317.0], [51.0, 317.0], [51.1, 318.0], [51.2, 318.0], [51.3, 319.0], [51.4, 319.0], [51.5, 320.0], [51.6, 320.0], [51.7, 323.0], [51.8, 323.0], [51.9, 324.0], [52.0, 325.0], [52.1, 326.0], [52.2, 327.0], [52.3, 328.0], [52.4, 328.0], [52.5, 330.0], [52.6, 330.0], [52.7, 333.0], [52.8, 334.0], [52.9, 335.0], [53.0, 337.0], [53.1, 338.0], [53.2, 338.0], [53.3, 338.0], [53.4, 340.0], [53.5, 341.0], [53.6, 342.0], [53.7, 343.0], [53.8, 344.0], [53.9, 344.0], [54.0, 345.0], [54.1, 346.0], [54.2, 347.0], [54.3, 348.0], [54.4, 349.0], [54.5, 350.0], [54.6, 351.0], [54.7, 351.0], [54.8, 352.0], [54.9, 353.0], [55.0, 355.0], [55.1, 357.0], [55.2, 359.0], [55.3, 360.0], [55.4, 361.0], [55.5, 362.0], [55.6, 363.0], [55.7, 364.0], [55.8, 365.0], [55.9, 366.0], [56.0, 367.0], [56.1, 368.0], [56.2, 369.0], [56.3, 370.0], [56.4, 371.0], [56.5, 372.0], [56.6, 373.0], [56.7, 373.0], [56.8, 374.0], [56.9, 376.0], [57.0, 376.0], [57.1, 377.0], [57.2, 378.0], [57.3, 379.0], [57.4, 379.0], [57.5, 381.0], [57.6, 382.0], [57.7, 383.0], [57.8, 384.0], [57.9, 385.0], [58.0, 386.0], [58.1, 388.0], [58.2, 389.0], [58.3, 389.0], [58.4, 392.0], [58.5, 393.0], [58.6, 394.0], [58.7, 396.0], [58.8, 397.0], [58.9, 399.0], [59.0, 401.0], [59.1, 402.0], [59.2, 403.0], [59.3, 404.0], [59.4, 407.0], [59.5, 408.0], [59.6, 410.0], [59.7, 411.0], [59.8, 412.0], [59.9, 412.0], [60.0, 415.0], [60.1, 415.0], [60.2, 418.0], [60.3, 419.0], [60.4, 420.0], [60.5, 422.0], [60.6, 424.0], [60.7, 425.0], [60.8, 427.0], [60.9, 429.0], [61.0, 430.0], [61.1, 433.0], [61.2, 434.0], [61.3, 435.0], [61.4, 437.0], [61.5, 438.0], [61.6, 439.0], [61.7, 442.0], [61.8, 443.0], [61.9, 444.0], [62.0, 445.0], [62.1, 447.0], [62.2, 449.0], [62.3, 450.0], [62.4, 454.0], [62.5, 455.0], [62.6, 457.0], [62.7, 459.0], [62.8, 461.0], [62.9, 463.0], [63.0, 466.0], [63.1, 468.0], [63.2, 469.0], [63.3, 470.0], [63.4, 472.0], [63.5, 473.0], [63.6, 475.0], [63.7, 478.0], [63.8, 479.0], [63.9, 481.0], [64.0, 483.0], [64.1, 485.0], [64.2, 487.0], [64.3, 488.0], [64.4, 489.0], [64.5, 490.0], [64.6, 491.0], [64.7, 492.0], [64.8, 494.0], [64.9, 495.0], [65.0, 496.0], [65.1, 497.0], [65.2, 499.0], [65.3, 501.0], [65.4, 502.0], [65.5, 505.0], [65.6, 505.0], [65.7, 509.0], [65.8, 510.0], [65.9, 511.0], [66.0, 515.0], [66.1, 517.0], [66.2, 520.0], [66.3, 523.0], [66.4, 525.0], [66.5, 527.0], [66.6, 527.0], [66.7, 529.0], [66.8, 530.0], [66.9, 531.0], [67.0, 532.0], [67.1, 533.0], [67.2, 535.0], [67.3, 537.0], [67.4, 539.0], [67.5, 540.0], [67.6, 541.0], [67.7, 542.0], [67.8, 543.0], [67.9, 545.0], [68.0, 548.0], [68.1, 550.0], [68.2, 552.0], [68.3, 555.0], [68.4, 557.0], [68.5, 559.0], [68.6, 559.0], [68.7, 561.0], [68.8, 563.0], [68.9, 564.0], [69.0, 567.0], [69.1, 568.0], [69.2, 570.0], [69.3, 572.0], [69.4, 574.0], [69.5, 575.0], [69.6, 577.0], [69.7, 578.0], [69.8, 578.0], [69.9, 580.0], [70.0, 581.0], [70.1, 583.0], [70.2, 584.0], [70.3, 585.0], [70.4, 587.0], [70.5, 588.0], [70.6, 589.0], [70.7, 590.0], [70.8, 592.0], [70.9, 593.0], [71.0, 593.0], [71.1, 594.0], [71.2, 596.0], [71.3, 597.0], [71.4, 597.0], [71.5, 597.0], [71.6, 599.0], [71.7, 600.0], [71.8, 602.0], [71.9, 602.0], [72.0, 604.0], [72.1, 605.0], [72.2, 606.0], [72.3, 607.0], [72.4, 608.0], [72.5, 609.0], [72.6, 611.0], [72.7, 612.0], [72.8, 613.0], [72.9, 615.0], [73.0, 615.0], [73.1, 616.0], [73.2, 618.0], [73.3, 618.0], [73.4, 620.0], [73.5, 622.0], [73.6, 623.0], [73.7, 624.0], [73.8, 626.0], [73.9, 628.0], [74.0, 629.0], [74.1, 631.0], [74.2, 634.0], [74.3, 634.0], [74.4, 637.0], [74.5, 639.0], [74.6, 641.0], [74.7, 643.0], [74.8, 645.0], [74.9, 649.0], [75.0, 651.0], [75.1, 654.0], [75.2, 663.0], [75.3, 671.0], [75.4, 675.0], [75.5, 679.0], [75.6, 696.0], [75.7, 725.0], [75.8, 747.0], [75.9, 784.0], [76.0, 817.0], [76.1, 867.0], [76.2, 914.0], [76.3, 936.0], [76.4, 958.0], [76.5, 973.0], [76.6, 980.0], [76.7, 994.0], [76.8, 1005.0], [76.9, 1029.0], [77.0, 1039.0], [77.1, 1055.0], [77.2, 1060.0], [77.3, 1073.0], [77.4, 1090.0], [77.5, 1094.0], [77.6, 1103.0], [77.7, 1113.0], [77.8, 1126.0], [77.9, 1131.0], [78.0, 1144.0], [78.1, 1154.0], [78.2, 1161.0], [78.3, 1168.0], [78.4, 1174.0], [78.5, 1176.0], [78.6, 1179.0], [78.7, 1189.0], [78.8, 1195.0], [78.9, 1200.0], [79.0, 1205.0], [79.1, 1210.0], [79.2, 1214.0], [79.3, 1218.0], [79.4, 1223.0], [79.5, 1225.0], [79.6, 1228.0], [79.7, 1240.0], [79.8, 1243.0], [79.9, 1245.0], [80.0, 1248.0], [80.1, 1251.0], [80.2, 1259.0], [80.3, 1264.0], [80.4, 1270.0], [80.5, 1274.0], [80.6, 1285.0], [80.7, 1293.0], [80.8, 1298.0], [80.9, 1307.0], [81.0, 1313.0], [81.1, 1320.0], [81.2, 1328.0], [81.3, 1334.0], [81.4, 1344.0], [81.5, 1350.0], [81.6, 1375.0], [81.7, 1430.0], [81.8, 1444.0], [81.9, 1460.0], [82.0, 1470.0], [82.1, 1483.0], [82.2, 1500.0], [82.3, 1533.0], [82.4, 1547.0], [82.5, 1559.0], [82.6, 1574.0], [82.7, 1586.0], [82.8, 1592.0], [82.9, 1596.0], [83.0, 1601.0], [83.1, 1610.0], [83.2, 1616.0], [83.3, 1624.0], [83.4, 1638.0], [83.5, 1639.0], [83.6, 1646.0], [83.7, 1656.0], [83.8, 1669.0], [83.9, 1679.0], [84.0, 1693.0], [84.1, 1697.0], [84.2, 1701.0], [84.3, 1703.0], [84.4, 1711.0], [84.5, 1727.0], [84.6, 1740.0], [84.7, 1744.0], [84.8, 1754.0], [84.9, 1767.0], [85.0, 1777.0], [85.1, 1781.0], [85.2, 1792.0], [85.3, 1796.0], [85.4, 1807.0], [85.5, 1818.0], [85.6, 1821.0], [85.7, 1842.0], [85.8, 1856.0], [85.9, 1866.0], [86.0, 1878.0], [86.1, 1896.0], [86.2, 1906.0], [86.3, 1927.0], [86.4, 1959.0], [86.5, 1976.0], [86.6, 2000.0], [86.7, 2020.0], [86.8, 2034.0], [86.9, 2049.0], [87.0, 2065.0], [87.1, 2094.0], [87.2, 2120.0], [87.3, 2134.0], [87.4, 2151.0], [87.5, 2166.0], [87.6, 2182.0], [87.7, 2201.0], [87.8, 2213.0], [87.9, 2219.0], [88.0, 2229.0], [88.1, 2244.0], [88.2, 2258.0], [88.3, 2275.0], [88.4, 2285.0], [88.5, 2297.0], [88.6, 2308.0], [88.7, 2328.0], [88.8, 2347.0], [88.9, 2363.0], [89.0, 2402.0], [89.1, 2410.0], [89.2, 2467.0], [89.3, 2492.0], [89.4, 2519.0], [89.5, 2527.0], [89.6, 2548.0], [89.7, 2582.0], [89.8, 2597.0], [89.9, 2620.0], [90.0, 2651.0], [90.1, 2685.0], [90.2, 2699.0], [90.3, 2716.0], [90.4, 2740.0], [90.5, 2761.0], [90.6, 2772.0], [90.7, 2788.0], [90.8, 2804.0], [90.9, 2834.0], [91.0, 2849.0], [91.1, 2860.0], [91.2, 2878.0], [91.3, 2901.0], [91.4, 2928.0], [91.5, 2961.0], [91.6, 3022.0], [91.7, 3040.0], [91.8, 3059.0], [91.9, 3106.0], [92.0, 3150.0], [92.1, 3179.0], [92.2, 3214.0], [92.3, 3274.0], [92.4, 3319.0], [92.5, 3327.0], [92.6, 3368.0], [92.7, 3397.0], [92.8, 3439.0], [92.9, 3476.0], [93.0, 3491.0], [93.1, 3518.0], [93.2, 3544.0], [93.3, 3609.0], [93.4, 3683.0], [93.5, 3712.0], [93.6, 3733.0], [93.7, 3772.0], [93.8, 3808.0], [93.9, 3828.0], [94.0, 3874.0], [94.1, 3960.0], [94.2, 4031.0], [94.3, 4073.0], [94.4, 4133.0], [94.5, 4167.0], [94.6, 4202.0], [94.7, 4235.0], [94.8, 4263.0], [94.9, 4343.0], [95.0, 4452.0], [95.1, 4520.0], [95.2, 4605.0], [95.3, 4640.0], [95.4, 4722.0], [95.5, 4787.0], [95.6, 4810.0], [95.7, 4877.0], [95.8, 4924.0], [95.9, 4989.0], [96.0, 5011.0], [96.1, 5050.0], [96.2, 5091.0], [96.3, 5129.0], [96.4, 5201.0], [96.5, 5233.0], [96.6, 5250.0], [96.7, 5300.0], [96.8, 5398.0], [96.9, 5476.0], [97.0, 5558.0], [97.1, 5640.0], [97.2, 5725.0], [97.3, 5863.0], [97.4, 5998.0], [97.5, 6093.0], [97.6, 6333.0], [97.7, 6423.0], [97.8, 6520.0], [97.9, 6681.0], [98.0, 6804.0], [98.1, 6993.0], [98.2, 7274.0], [98.3, 7751.0], [98.4, 8050.0], [98.5, 8368.0], [98.6, 8569.0], [98.7, 8890.0], [98.8, 9068.0], [98.9, 9623.0], [99.0, 9848.0], [99.1, 10318.0], [99.2, 10780.0], [99.3, 11951.0], [99.4, 13344.0], [99.5, 15410.0], [99.6, 16457.0], [99.7, 21002.0], [99.8, 22374.0], [99.9, 23720.0], [100.0, 36146.0]], "isOverall": false, "label": "Main Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 2551.0, "series": [{"data": [[36100.0, 1.0], [200.0, 2551.0], [300.0, 572.0], [400.0, 335.0], [500.0, 340.0], [600.0, 210.0], [700.0, 16.0], [800.0, 13.0], [900.0, 31.0], [1000.0, 44.0], [1100.0, 69.0], [1200.0, 102.0], [1300.0, 44.0], [1400.0, 29.0], [1500.0, 42.0], [1600.0, 64.0], [1700.0, 61.0], [1800.0, 43.0], [1900.0, 22.0], [2000.0, 29.0], [2100.0, 30.0], [2200.0, 45.0], [2300.0, 24.0], [2400.0, 21.0], [2500.0, 23.0], [2600.0, 21.0], [2700.0, 31.0], [2800.0, 26.0], [2900.0, 14.0], [3000.0, 18.0], [3100.0, 13.0], [3200.0, 12.0], [3300.0, 20.0], [3400.0, 15.0], [3500.0, 14.0], [3700.0, 17.0], [3600.0, 9.0], [3800.0, 14.0], [3900.0, 5.0], [4000.0, 12.0], [4100.0, 12.0], [4200.0, 14.0], [4300.0, 6.0], [4600.0, 12.0], [4500.0, 5.0], [4400.0, 6.0], [4800.0, 9.0], [4700.0, 9.0], [5100.0, 9.0], [4900.0, 13.0], [5000.0, 13.0], [5200.0, 16.0], [5300.0, 6.0], [5500.0, 7.0], [5600.0, 6.0], [5400.0, 6.0], [5700.0, 5.0], [5800.0, 2.0], [5900.0, 6.0], [6000.0, 5.0], [6100.0, 1.0], [6300.0, 5.0], [6200.0, 2.0], [6600.0, 4.0], [6400.0, 7.0], [6500.0, 2.0], [6700.0, 4.0], [6800.0, 3.0], [6900.0, 4.0], [7100.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7400.0, 1.0], [7600.0, 2.0], [7900.0, 1.0], [7800.0, 3.0], [7700.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8300.0, 3.0], [8400.0, 2.0], [8600.0, 2.0], [8500.0, 4.0], [8200.0, 1.0], [8800.0, 3.0], [9100.0, 3.0], [9000.0, 4.0], [8900.0, 1.0], [9600.0, 4.0], [9400.0, 1.0], [9700.0, 1.0], [9800.0, 2.0], [10000.0, 1.0], [10100.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [10300.0, 3.0], [10400.0, 1.0], [10700.0, 1.0], [10500.0, 1.0], [11100.0, 1.0], [11400.0, 2.0], [12000.0, 1.0], [11900.0, 2.0], [12400.0, 1.0], [12500.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [12900.0, 1.0], [13700.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [15300.0, 1.0], [15400.0, 4.0], [16100.0, 1.0], [16400.0, 3.0], [17000.0, 1.0], [17700.0, 1.0], [18900.0, 1.0], [21000.0, 1.0], [21400.0, 1.0], [22200.0, 1.0], [21700.0, 1.0], [22400.0, 1.0], [22100.0, 1.0], [22300.0, 1.0], [22800.0, 1.0], [23400.0, 1.0], [23700.0, 2.0], [24500.0, 1.0], [25200.0, 1.0], [27800.0, 1.0], [29100.0, 1.0]], "isOverall": false, "label": "Main Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 36100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 897.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3460.0, "series": [{"data": [[0.0, 3460.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 897.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 943.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 20.203143893591285, "minX": 1.6161417E12, "maxY": 173.00781250000014, "series": [{"data": [[1.6161417E12, 173.00781250000014], [1.61614182E12, 20.203143893591285], [1.61614176E12, 22.31318509238959]], "isOverall": false, "label": "Test Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61614182E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 245.38509316770174, "minX": 1.0, "maxY": 13685.0, "series": [{"data": [[2.0, 261.5], [3.0, 256.6666666666667], [4.0, 283.8333333333333], [5.0, 285.5714285714286], [6.0, 259.75], [7.0, 271.1111111111111], [8.0, 272.2307692307692], [9.0, 408.44], [10.0, 340.16], [11.0, 261.69565217391306], [12.0, 765.9859154929577], [13.0, 245.38509316770174], [14.0, 256.70431472081225], [15.0, 271.0853932584269], [16.0, 274.1570996978853], [17.0, 496.5491803278694], [18.0, 302.5889570552147], [19.0, 557.1858407079645], [20.0, 840.0769230769233], [21.0, 337.5189873417722], [22.0, 360.8433734939762], [23.0, 433.95833333333326], [24.0, 418.27450980392166], [25.0, 410.71698113207555], [26.0, 428.21428571428567], [27.0, 448.8125], [28.0, 502.12500000000006], [29.0, 491.77777777777777], [30.0, 462.78260869565213], [31.0, 556.923076923077], [33.0, 745.7333333333332], [32.0, 884.7948717948718], [35.0, 599.2142857142857], [34.0, 470.6000000000001], [37.0, 1525.8571428571427], [36.0, 580.7333333333333], [39.0, 4121.428571428572], [38.0, 904.0909090909092], [41.0, 480.4], [40.0, 648.7777777777778], [42.0, 637.0], [43.0, 647.8], [45.0, 782.9230769230769], [44.0, 602.0], [47.0, 4093.3333333333335], [46.0, 603.0], [49.0, 5937.0], [48.0, 2449.9230769230776], [51.0, 891.25], [50.0, 515.2], [53.0, 5620.533333333334], [52.0, 918.1428571428571], [55.0, 2705.777777777778], [54.0, 2016.4705882352937], [57.0, 1343.0], [56.0, 973.6153846153846], [59.0, 1136.142857142857], [58.0, 814.9166666666666], [61.0, 914.1], [60.0, 998.8000000000001], [63.0, 1855.8823529411766], [62.0, 1014.2], [65.0, 2217.3999999999996], [67.0, 1025.6250000000002], [66.0, 1361.8333333333335], [64.0, 1427.9333333333332], [71.0, 1231.333333333333], [70.0, 3284.8571428571427], [69.0, 1177.111111111111], [68.0, 1659.8], [75.0, 3190.5714285714284], [74.0, 2640.7999999999997], [73.0, 2227.888888888889], [72.0, 1179.6153846153845], [79.0, 1229.8], [78.0, 1049.0666666666666], [77.0, 1256.7272727272727], [76.0, 1205.0], [83.0, 1320.0909090909092], [82.0, 1355.3809523809523], [81.0, 1433.2727272727273], [80.0, 816.2], [87.0, 1219.7692307692305], [86.0, 4090.375], [85.0, 1205.8750000000002], [84.0, 1137.5714285714284], [91.0, 1983.5294117647059], [90.0, 1001.5789473684212], [89.0, 3975.125], [88.0, 1213.4], [95.0, 2334.3333333333335], [93.0, 1035.625], [92.0, 7494.2], [94.0, 951.0], [99.0, 929.6666666666666], [98.0, 2113.6666666666665], [97.0, 893.0], [96.0, 989.6666666666667], [103.0, 898.25], [102.0, 1295.5], [101.0, 1716.5], [100.0, 1749.6666666666667], [107.0, 2060.454545454545], [106.0, 2676.363636363636], [105.0, 3523.7], [104.0, 1331.1666666666665], [111.0, 1642.5], [110.0, 1495.0], [109.0, 1273.6], [108.0, 2646.1111111111113], [115.0, 1435.5], [114.0, 5777.0], [113.0, 1423.25], [112.0, 2810.0], [119.0, 1176.0], [118.0, 7237.0], [117.0, 2719.6666666666665], [123.0, 3003.2], [122.0, 1294.75], [121.0, 3201.0], [120.0, 615.0], [127.0, 13685.0], [126.0, 1565.0], [125.0, 2732.5], [124.0, 1367.4285714285713], [135.0, 1869.1538461538462], [134.0, 2579.304347826087], [132.0, 3194.0], [131.0, 3017.333333333333], [133.0, 2083.235294117647], [130.0, 972.5], [129.0, 1096.0], [128.0, 8165.0], [143.0, 2021.888888888889], [142.0, 2123.1111111111113], [141.0, 1928.0], [140.0, 2037.5], [139.0, 2100.0], [138.0, 2788.3333333333335], [136.0, 1285.25], [137.0, 1576.0], [151.0, 3680.5], [150.0, 1403.0], [149.0, 1857.6], [148.0, 2393.1428571428573], [147.0, 599.0], [146.0, 5779.5], [145.0, 2031.2222222222222], [144.0, 1884.8], [159.0, 4329.0], [158.0, 1504.5], [156.0, 2004.7777777777783], [157.0, 3911.333333333333], [155.0, 4093.4999999999995], [154.0, 2064.2], [153.0, 6564.0], [152.0, 1974.5], [167.0, 1354.5], [166.0, 3493.1666666666665], [165.0, 1939.6], [163.0, 2495.0], [164.0, 6583.0], [162.0, 1279.0], [161.0, 4742.0], [160.0, 1737.0], [175.0, 1757.4], [174.0, 1198.5], [173.0, 2125.75], [172.0, 1866.5714285714284], [171.0, 3037.1818181818185], [170.0, 1732.25], [169.0, 1741.5], [168.0, 4919.0], [182.0, 1713.5], [183.0, 2514.5], [181.0, 3025.0], [180.0, 4176.923076923077], [179.0, 2185.3333333333335], [178.0, 2463.9444444444443], [177.0, 2549.6666666666665], [176.0, 3557.888888888889], [191.0, 4747.5], [190.0, 3510.0], [189.0, 3833.875], [188.0, 4099.0], [187.0, 3529.0], [185.0, 2555.833333333333], [184.0, 2869.5], [186.0, 3949.833333333333], [199.0, 2358.6], [198.0, 2870.0], [197.0, 2191.166666666667], [196.0, 3059.1111111111113], [195.0, 1552.0], [194.0, 3581.0000000000005], [193.0, 2123.8], [192.0, 3401.625], [206.0, 3008.9523809523816], [205.0, 3110.705882352941], [204.0, 2394.4545454545455], [203.0, 3043.75], [202.0, 2416.4615384615386], [207.0, 3739.2], [201.0, 2825.8333333333335], [200.0, 3634.7999999999997], [214.0, 3472.333333333333], [215.0, 1835.0], [213.0, 315.5], [212.0, 450.66666666666663], [211.0, 2323.75], [210.0, 4099.8], [209.0, 2983.2], [208.0, 3881.2], [222.0, 3029.846153846154], [219.0, 2857.666666666667], [216.0, 4620.666666666667], [217.0, 2894.75], [218.0, 3078.7857142857138], [223.0, 3059.6153846153848], [221.0, 2919.125], [220.0, 3377.7333333333336], [231.0, 2983.4444444444443], [230.0, 4372.222222222222], [228.0, 4441.666666666666], [229.0, 5238.124999999999], [227.0, 3959.4166666666665], [226.0, 3908.7222222222213], [225.0, 4001.8666666666672], [224.0, 3004.8823529411766], [237.0, 2916.5555555555557], [235.0, 4879.666666666667], [236.0, 4122.6], [234.0, 3245.75], [233.0, 1574.0], [232.0, 4424.874999999999], [238.0, 3885.214285714286], [239.0, 3806.9999999999995], [247.0, 2701.3333333333335], [243.0, 3178.3333333333335], [241.0, 3347.9473684210534], [240.0, 4495.619047619048], [242.0, 3514.714285714286], [244.0, 2863.4], [245.0, 4182.5], [248.0, 2988.375], [249.0, 3931.5], [250.0, 3619.1666666666665], [251.0, 3023.5], [252.0, 2086.5], [253.0, 5227.0], [254.0, 4145.0], [255.0, 4241.0], [256.0, 1223.0], [257.0, 2523.0], [258.0, 3149.5], [261.0, 3432.6666666666665], [262.0, 3208.0], [263.0, 5262.0], [264.0, 3244.636363636364], [1.0, 268.5]], "isOverall": false, "label": "Main Page", "isController": false}, {"data": [[58.37811320754733, 1057.9683018867947]], "isOverall": false, "label": "Main Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 264.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1626.4333333333334, "minX": 1.6161417E12, "maxY": 220083.25, "series": [{"data": [[1.6161417E12, 88228.06666666667], [1.61614182E12, 57001.416666666664], [1.61614176E12, 220083.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6161417E12, 2517.3333333333335], [1.61614182E12, 1626.4333333333334], [1.61614176E12, 6279.566666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61614182E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 356.7363966142688, "minX": 1.6161417E12, "maxY": 2899.653125000002, "series": [{"data": [[1.6161417E12, 2899.653125000002], [1.61614182E12, 356.7363966142688], [1.61614176E12, 501.3012840588784]], "isOverall": false, "label": "Main Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61614182E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 356.7182587666267, "minX": 1.6161417E12, "maxY": 2885.9484374999925, "series": [{"data": [[1.6161417E12, 2885.9484374999925], [1.61614182E12, 356.7182587666267], [1.61614176E12, 501.2840588787958]], "isOverall": false, "label": "Main Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61614182E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 266.6287787182586, "minX": 1.6161417E12, "maxY": 2045.5460937499997, "series": [{"data": [[1.6161417E12, 2045.5460937499997], [1.61614182E12, 266.6287787182586], [1.61614176E12, 321.37456937049865]], "isOverall": false, "label": "Main Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61614182E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 222.0, "minX": 1.6161417E12, "maxY": 36146.0, "series": [{"data": [[1.6161417E12, 23720.0], [1.61614182E12, 1450.0], [1.61614176E12, 36146.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6161417E12, 5850.900000000007], [1.61614182E12, 505.0], [1.61614176E12, 597.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6161417E12, 15326.570000000005], [1.61614182E12, 720.0800000000017], [1.61614176E12, 2495.359999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6161417E12, 8366.100000000002], [1.61614182E12, 555.5999999999999], [1.61614176E12, 1190.3999999999978]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6161417E12, 254.0], [1.61614182E12, 224.0], [1.61614176E12, 222.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6161417E12, 2038.0], [1.61614182E12, 327.0], [1.61614176E12, 261.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61614182E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 243.0, "minX": 10.0, "maxY": 3474.0, "series": [{"data": [[36.0, 295.0], [37.0, 270.0], [41.0, 252.0], [42.0, 1128.5], [46.0, 246.0], [47.0, 449.0], [48.0, 259.0], [49.0, 261.0], [50.0, 492.0], [51.0, 273.0], [53.0, 264.0], [52.0, 250.0], [54.0, 258.0], [55.0, 255.0], [56.0, 249.0], [59.0, 315.0], [58.0, 256.0], [60.0, 1516.5], [61.0, 395.0], [62.0, 1615.5], [63.0, 598.0], [66.0, 644.0], [65.0, 573.0], [64.0, 591.0], [71.0, 2726.0], [68.0, 1042.5], [70.0, 1220.0], [75.0, 1870.0], [74.0, 608.5], [120.0, 3227.0], [10.0, 257.5], [26.0, 243.0], [27.0, 3474.0], [30.0, 618.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 243.0, "minX": 10.0, "maxY": 3474.0, "series": [{"data": [[36.0, 295.0], [37.0, 270.0], [41.0, 252.0], [42.0, 1128.5], [46.0, 246.0], [47.0, 449.0], [48.0, 259.0], [49.0, 261.0], [50.0, 492.0], [51.0, 273.0], [53.0, 264.0], [52.0, 250.0], [54.0, 258.0], [55.0, 255.0], [56.0, 249.0], [59.0, 315.0], [58.0, 256.0], [60.0, 1516.5], [61.0, 395.0], [62.0, 1615.5], [63.0, 598.0], [66.0, 644.0], [65.0, 573.0], [64.0, 591.0], [71.0, 2726.0], [68.0, 1042.5], [70.0, 1220.0], [75.0, 1870.0], [74.0, 608.5], [120.0, 3116.5], [10.0, 257.5], [26.0, 243.0], [27.0, 3474.0], [30.0, 618.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.566666666666666, "minX": 1.6161417E12, "maxY": 52.55, "series": [{"data": [[1.6161417E12, 22.216666666666665], [1.61614182E12, 13.566666666666666], [1.61614176E12, 52.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61614182E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 13.783333333333333, "minX": 1.6161417E12, "maxY": 53.21666666666667, "series": [{"data": [[1.6161417E12, 21.333333333333332], [1.61614182E12, 13.783333333333333], [1.61614176E12, 53.21666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61614182E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.783333333333333, "minX": 1.6161417E12, "maxY": 53.21666666666667, "series": [{"data": [[1.6161417E12, 21.333333333333332], [1.61614182E12, 13.783333333333333], [1.61614176E12, 53.21666666666667]], "isOverall": false, "label": "Main Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61614182E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 13.783333333333333, "minX": 1.6161417E12, "maxY": 53.21666666666667, "series": [{"data": [[1.6161417E12, 21.333333333333332], [1.61614182E12, 13.783333333333333], [1.61614176E12, 53.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61614182E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

